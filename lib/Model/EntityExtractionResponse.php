<?php
/**
 * EntityExtractionResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  DandelionPHP
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Dandelion Swagger API
 *
 * Unofficial Dandelion Swagger API definition
 *
 * OpenAPI spec version: 0.0.1
 * Contact: g.prinaricotti@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DandelionPHP\Model;

use \ArrayAccess;

/**
 * EntityExtractionResponse Class Doc Comment
 *
 * @category    Class
 * @package     DandelionPHP
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EntityExtractionResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'EntityExtractionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'timestamp' => '\DateTime',
        'time' => 'int',
        'lang' => 'string',
        'lang_confidence' => 'float',
        'text' => 'string',
        'url' => 'string',
        'annotations' => '\DandelionPHP\Model\EntityExtractionResponseAnnotation[]',
        'top_entities' => '\DandelionPHP\Model\EntityExtractionResponseTopEntity[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'timestamp' => 'timestamp',
        'time' => 'time',
        'lang' => 'lang',
        'lang_confidence' => 'langConfidence',
        'text' => 'text',
        'url' => 'url',
        'annotations' => 'annotations',
        'top_entities' => 'topEntities'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'timestamp' => 'setTimestamp',
        'time' => 'setTime',
        'lang' => 'setLang',
        'lang_confidence' => 'setLangConfidence',
        'text' => 'setText',
        'url' => 'setUrl',
        'annotations' => 'setAnnotations',
        'top_entities' => 'setTopEntities'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'timestamp' => 'getTimestamp',
        'time' => 'getTime',
        'lang' => 'getLang',
        'lang_confidence' => 'getLangConfidence',
        'text' => 'getText',
        'url' => 'getUrl',
        'annotations' => 'getAnnotations',
        'top_entities' => 'getTopEntities'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['time'] = isset($data['time']) ? $data['time'] : null;
        $this->container['lang'] = isset($data['lang']) ? $data['lang'] : null;
        $this->container['lang_confidence'] = isset($data['lang_confidence']) ? $data['lang_confidence'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['annotations'] = isset($data['annotations']) ? $data['annotations'] : null;
        $this->container['top_entities'] = isset($data['top_entities']) ? $data['top_entities'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets timestamp
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     * @param \DateTime $timestamp Date and time of the response generation process
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets time
     * @return int
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     * @param int $time Time elapsed for generating the response (milliseconds)
     * @return $this
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets lang
     * @return string
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     * @param string $lang The language used to tag the input text
     * @return $this
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets lang_confidence
     * @return float
     */
    public function getLangConfidence()
    {
        return $this->container['lang_confidence'];
    }

    /**
     * Sets lang_confidence
     * @param float $lang_confidence Accuracy of the language detection, from 0.0 to 1.0. Present only if auto-detection is on
     * @return $this
     */
    public function setLangConfidence($lang_confidence)
    {
        $this->container['lang_confidence'] = $lang_confidence;

        return $this;
    }

    /**
     * Gets text
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     * @param string $text The annotated text. Present only if the 'url' or 'html' parameters have been used
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url The actual URL from which the text has been extracted. Present only if the 'url' parameter has been used
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets annotations
     * @return \DandelionPHP\Model\EntityExtractionResponseAnnotation[]
     */
    public function getAnnotations()
    {
        return $this->container['annotations'];
    }

    /**
     * Sets annotations
     * @param \DandelionPHP\Model\EntityExtractionResponseAnnotation[] $annotations
     * @return $this
     */
    public function setAnnotations($annotations)
    {
        $this->container['annotations'] = $annotations;

        return $this;
    }

    /**
     * Gets top_entities
     * @return \DandelionPHP\Model\EntityExtractionResponseTopEntity[]
     */
    public function getTopEntities()
    {
        return $this->container['top_entities'];
    }

    /**
     * Sets top_entities
     * @param \DandelionPHP\Model\EntityExtractionResponseTopEntity[] $top_entities
     * @return $this
     */
    public function setTopEntities($top_entities)
    {
        $this->container['top_entities'] = $top_entities;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DandelionPHP\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DandelionPHP\ObjectSerializer::sanitizeForSerialization($this));
    }
}


